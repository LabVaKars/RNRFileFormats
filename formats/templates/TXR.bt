//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local float w, h;
local uint pos, offset, size;

const int LVMP_FOURCC = 1347245644; 
const int PFRM_FOURCC = 1297237584;
const int ENDR_FOURCC = 1380208197;

typedef enum <char> {
  LOFF,
  PFRM,
  LVMP,
  ENDR
} IDENTIFIER;

// 
typedef struct {
  IDENTIFIER Name[4];
  UINT SectionSize;  
} ENDR;

// mipmaps
typedef struct {
  IDENTIFIER Name[4];
  UINT SectionSize;
  pos = FTell();
  UINT Count;
  UINT Width;
  UINT Height; 
  UINT bitDepth; 

  w = Width; 
  h = Height;
  while (w >= 1) 
  {
    typedef struct {
      if (bitDepth == 4) 
        UINT Pixel;
      if (bitDepth == 2) 
        UINT16 Pixel;
      else
        BYTE Pixel;
    } TEXEL; 
    typedef struct (int arraySize) {
      TEXEL array[arraySize];
    } TEXELS; 
    TEXELS Texel(w*h);

    w = w/2; h = h/2;
  };

  size = SectionSize + 3;
  offset = ((size & 255) & 252) | (((size >> 8) << 8));
  FSeek(pos + offset);
} LVMP;

// bit masks
typedef struct {
  IDENTIFIER Name[4];
  UINT SectionSize;
  UINT RedMask;
  UINT GreenMask;
  UINT BlueMask;
  UINT AlphaMask;

  if (SectionSize > 16) 
    BYTE Empty[12];
} PFRM;

typedef struct {
  IDENTIFIER id[4];
  UINT SectionSize;
  UINT Offset;
} LOFF;

BitfieldDisablePadding();

typedef struct { 
  // BGR565, BGRA5551, BGRA4444
  UBYTE Red: 5;
  UBYTE Green: 6;
  UBYTE Blue: 5;
} RGB16;

typedef struct { 
  UBYTE Red;
  UBYTE Green;
  UBYTE Blue;
} RGB24;

typedef struct {          
  UBYTE  IDLength;
  UBYTE  ColorMapType; // 1 - Hard Truck 1, 0 - Hard Truck 2
  UBYTE  ImageType;
  WORD   FirstIndexEntry;
  WORD   ColorMapLength;
  UBYTE  ColorMapEntrySize; 

  WORD   XOrigin;
  WORD   YOrigin;
  WORD   Width;
  WORD   Height;
  UBYTE  PixelDepth;
  UBYTE  ImageDescriptor;
} TGA_HEADER;

typedef struct {
  ubyte R;
  ubyte G;
  ubyte B;
} PALETTE;

TGA_HEADER header;

if (header.IDLength == 12) 
  LOFF loff;

w = header.Width;
h = header.Height;
 
if (header.PixelDepth == 8)
{ 
  PALETTE palette[256];
  UBYTE Data[h * w]; 
} 
else if (header.PixelDepth == 16)
  RGB16 Pixel[h * w];
else 
  RGB24 Pixel[h * w];

while (!FEof())
  switch (ReadUInt(FTell())) 
  {
    case LVMP_FOURCC: 
      LVMP lvmp; break;
    case PFRM_FOURCC: 
      PFRM pfrm; break;
    case ENDR_FOURCC: 
      ENDR endr; break;
  } 