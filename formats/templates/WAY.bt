//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: WAY.bt
//   Authors: Alexandr Evdokimov
//   Version: 0.1
//   Purpose: Hard truck 2 WAY file
//
//   History: 
//    
//   2018.05 v 0.1 initial release 
//
//------------------------------------------------

typedef enum <uint> {
  MNAM = 0x4D414E4D, // module name
  GDAT = 0x54414447, // data
  GROM = 0x4D4F5247, // room
  RNAM = 0x4D414E52, // room Name
  RNOD = 0x444F4E52, // = room Node
  NNAM = 0x4D414E4E, // = node name
  POSN = 0x4E534F50, // = position
  WDTH = 0x48544457, // = width
  RSEG = 0x47455352, // = room segment
  ATTR = 0x52545441, // = attributes
  VDAT = 0x54414456, // segment points
  RTEN = 0x4E455452, // name
  FLAG = 0x47414c46 , //
  ORTN = 0x4E54524F
} IDENTIFIER;

typedef struct {
  DOUBLE X;
  DOUBLE Y;
  DOUBLE Z;
} VECTOR3F8;

char WTWR[4] <name="WTWR signature">;
UINT len;

int chunks(uint size) {
  local uint pos;

  while (!FEof()) 
  { 
    struct (uint size, uint ofc) {
      local uint pos = ofc;

      IDENTIFIER id; 
      UINT len;  

      pos = len + (-len & 3) + 8; 

      switch (id) 
      {
        case NNAM:
        case RNAM:
        case MNAM:
          char name[len] <name="Module short Name">;
          break;

        case GROM:
        case GDAT:           
        case RNOD:         
        case RSEG:
          chunks(len);
          break;

        case ATTR:
          UINT Unknown;
          DOUBLE Unknown;
          UINT LaneCount; // 2 - two lanes
          break;

        case ORTN:
          VECTOR3F8 X;
          VECTOR3F8 Y;
          VECTOR3F8 Z;
          VECTOR3F8 Pos;
          break; 
          
        case FLAG:
          UINT Unknown;
          break; 

        case WDTH: 
          DOUBLE X;
          DOUBLE Y;
          break;

        case POSN: 
          VECTOR3F8 Point;
          break;

        case VDAT: 
          UINT Count;
          VECTOR3F8 POINT [Count]; 
          break; 
         
        case RTEN: 
          UCHAR Name[len];             
          break;
      };

      if (-len & 3)
        struct {
          BYTE EmptyBytes[(-len & 3)];
        } PADDING;   
    } CHUNK(size, pos);

    pos += CHUNK.pos;
    if (pos >= size)
      break;
  } 

  return 0;
}

chunks(len);