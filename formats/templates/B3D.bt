//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: B3D.bt
//   Authors: Alexandr Evdokimov
//   Version: 0.4
//   Purpose: Hard truck 1/2 B3D file
//
//   History: 
//    
//   2018.10 v 0.4 Rework all structures
//   2018.09 v 0.3 Update structures
//   2018.06 v 0.2 added Hard Truck 1 structures
//   2018.05 v 0.1 initial release 
//
//------------------------------------------------

local uint ID, End4, Start4;

string IntToStr (uint i) {
  local string s;
  SPrintf(s, "%d", i);
  return s;
} 

typedef enum <uint> {
    no,
    yes
} BOOL; // bool data type

typedef struct {
  struct {
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
  } X;
  struct {
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
  } Y;
  struct {
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
  } Z;
  struct {
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
  } Pos; 
} MATRIX <name="Transformation matrix">;

typedef struct {
  FLOAT X;
  FLOAT Y;
  FLOAT Z;  
}  VECTOR_3F;

typedef struct {
  FLOAT X;
  FLOAT Y; 
} VECTOR_2F;

typedef enum <uint> {
  Begin_Chunks = 111,
  End_Chunks = 222,
  Begin_Node = 333,
  Group_Chunk = 444,
  End_Node = 555
} IDENTIFIER <name="Identifier">; 

typedef struct {
  struct { 
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
  } ORIGIN;
  FLOAT radius;
} BOUNDING_SPHERE <name="Bounding sphere">;

typedef struct { 
  VECTOR_3F Position <name="Position">;
  VECTOR_2F UV <name="UV">;
} VERTEX_POS_UV <name = "Vertex">;

typedef struct { 
  VECTOR_3F Position <name="Position">;
  VECTOR_2F UVW <name="UVW">;
} VERTEX_POS_UVW <name = "Vertex">;

typedef enum <uint> {
  asphalt = 1,
  land = 2,
  swamp = 4,
  bog = 3,
  wet_asphalt = 5,
  ice = 7,
  water = 8,
  sand = 10,
  desert = 11,
  spikes = 13,
  hard_ice = 16
} SURFACE_TYPE <name="Surface">;

struct {
  char B3D[4] <name="b3D signature">;
  struct {
    UINT FileSize; // 1/4*filesize
    UINT MatListOffset; // 6 (1/4*24)
    UINT MatListDataSize; // 1/4*(materials list data)
    UINT DataChunksOffset; // 1/4*(materials list data + file header)
    UINT NodesSectionSize; // 1/4*(datasize)
  } DataSizes <name = "Data sizes">;
} HEADER <name="File Header">;

struct {
    UINT MaterialCount <name="Count">;
    typedef struct {
      char String[32] <name="Name">; 
    } MATERIAL <optimize=false, name=MatName>;
    typedef struct (int arraySize) {
      MATERIAL array[arraySize] <optimize=false>;
    } MATERIAL_Array;       
    MATERIAL_Array Materials(MaterialCount) <name="Materials">;
} MAT_LIST <name="Material List">;

string MatName(MATERIAL &material) {
  return material.String;
};

UINT chunkTree(UINT ChildCount) {

  typedef struct {
    UINT ChildCount;
    chunkTree(ChildCount);
  } CHILD_NODES <name="Child nodes">;

  typedef struct {
    while (true) { 
      ID = ReadInt(FTell());    
      if (ID == 444)
      {
        IDENTIFIER Identifier <name="Group Chunk", bgcolor=0xFF00FF>;
        ++Start4;
      }
      else break;
    };
    IDENTIFIER Identifier <name="Begin Chunk">;
    struct {
      char String[32] <name="Name">;
      UINT ID <name="Chunk ID">;
    } HEADER <name="Header">;

    switch ( HEADER.ID ) 
    {
        // unused
        case 0: 
        {
          FLOAT Unknown; // 0        
          FLOAT Unknown; // 0 
          FLOAT Unknown; // 0 
          FLOAT Unknown; // 0 
          FLOAT Unknown; // 0         
          FLOAT Unknown; // 0 
          FLOAT Unknown; // 0  
          FLOAT Unknown; // 0 
          FLOAT Unknown; // 0  
          FLOAT Unknown; // 1
          FLOAT Unknown; // 0          
        }; break;
        // unused
        case 1: 
        {
          char Name1[32];
          char Name2[32];
        }; break;

        // some kind of trigger/switch
        case 2: 
        {
          BOUNDING_SPHERE Sphere;
          struct {
            FLOAT X;
            FLOAT Y;
            FLOAT Z;
          } NORMAL; // ??
          FLOAT Distance; // Radius
          CHILD_NODES ChildNodes;            
        }; break;

        // container for 3d objects, id = 3 only in Hard Truck 1
        case 3: 
        {
          BOUNDING_SPHERE Sphere;
          CHILD_NODES ChildNodes;           
        }; break;

        // container for 3d objects
        case 4: 
        {
          BOUNDING_SPHERE Sphere;
          char MatrixName[32] <name="Transform matrix">; 
          char UnknownData[32]; // 0000000...
          CHILD_NODES ChildNodes; 
        }; break;
    
        // container with child nodes
        case 5: 
        { 
          BOUNDING_SPHERE Sphere; 
          char ContainerName[32] <name="Name">; // name 

          CHILD_NODES ChildNodes;      
        }; break;

        // Only in Hard Truck 1, Vertex attributes
        case 6: {
          BOUNDING_SPHERE Sphere;
          char GroupName[32] <name="Name">; // name 
          char Name[32]; // name 

          UINT VertexCount <name="Vertex Count">; 
          VERTEX_POS_UV VertAttributes[VertexCount];

          CHILD_NODES ChildNodes;         
        }; break;

        // Vertex attributes
        case 7: {
          BOUNDING_SPHERE Sphere; 
          char GroupName[32]; // name 

          UINT VertexCount <name="Vertex Count">; 
          VERTEX_POS_UV VertAttributes[VertexCount];

          CHILD_NODES ChildNodes; 
        }; break;

        // polygons
        case 8: {
          BOUNDING_SPHERE Sphere; 

          UINT PolygonCount;

          struct { 
            UINT type;

            FLOAT Unknown; // 1
            UINT Unknown; // 32767
            UINT MaterialIndex;
            UINT Count;

            //if (Count > 4) {
             // Printf("%d ", Count); 
           // };

            struct { 
              if (type == 3 || type == 131 || type == 2) 
              {
                UINT VertexIndex;
                VECTOR_2F UV;                         
              } 
              else
              if (type == 177) 
              {
                VECTOR_2F UV;                           
              } 
              else
              if (type == 48 || type == 51 || type == 176 || type == 179) 
              {
                UINT VertexIndex;
                VECTOR_3F Coordinates;          
              } else 
              if (type == 50 || type == 178) 
              {
                UINT VertexIndex;
                VECTOR_3F Coordinates;  
                VECTOR_2F UV;  
              } 
              else
                UINT VertexIndex;
            } POLYGONS[Count] <name="Polygon attributes", optimize=false>;     
           
          } POLYGON[PolygonCount] <optimize=false, name="Polygons">;  
   
        }; break;

        case 9  : 
        {
          BOUNDING_SPHERE Sphere;
          struct {
            FLOAT X;
            FLOAT Y;
            FLOAT Z;
          } NORMAL;
          FLOAT Distance;
          CHILD_NODES ChildNodes;     
        }; break;

        // LOD Switch
        case 10  : 
        {
          BOUNDING_SPHERE Sphere ; 
          struct { 
            FLOAT X;
            FLOAT Y;
            FLOAT Z; 
          } POs; //??
          FLOAT Distance;     
          CHILD_NODES ChildNodes;         
        }; break;

        // only in Hard Truck 1
        case 11  : {
         // fkgfk();
          BOUNDING_SPHERE Sphere ;  
          FLOAT Unknown;
          FLOAT Unknown;
          FLOAT Unknown;
          FLOAT Unknown;    
          FLOAT Unknown;
          FLOAT Unknown;
          FLOAT Unknown;
          FLOAT Unknown;  
          CHILD_NODES ChildNodes;              
        }; break;

        case 12: {
          BOUNDING_SPHERE Sphere ;   
          FLOAT Unknown;
          FLOAT Unknown;
          FLOAT Unknown;
          FLOAT Unknown; 
          UINT Unknown;
          UINT Unknown;      
          CHILD_NODES ChildNodes;            
        }; break;

        case 13: {
          BOUNDING_SPHERE Sphere ;   
          UINT Unknown; // 11
          UINT Unknown2; // index, property ??
          UINT Count;
          
          if (Count > 3)
          {
            FLOAT Coords[Count - 3];
            char RoomName[8];
            UINT Unknown;
            //dfjdtfj();
          } else
          FLOAT Unknown0[Count];
  
        }; break;

        case 14: {
          UINT Empty; // 0
          UINT Empty; // 0
          UINT Empty; // 0
          UINT Empty; // 0

          FLOAT Unknown;
          FLOAT Unknown;
          FLOAT Unknown;
          FLOAT Unknown; 
          FLOAT Empty; // 0
          FLOAT Empty; // 0
          FLOAT Empty; // 0
        }; break;

        // only in Hard Truck 1
        case 16: {
          BOUNDING_SPHERE Sphere ;
          struct { 
            FLOAT X;
            FLOAT Y;
            FLOAT Z;
          } POS;
          struct {
            FLOAT X;
            FLOAT Y;
            FLOAT Z;
          } NORMAL;

          FLOAT Unknown;
          FLOAT Unknown;

          UINT Unknown;
          FLOAT Empty; // 0
          FLOAT Empty; // 0
        }; break;

        // only in Hard Truck 1
        case 17: {
          BOUNDING_SPHERE Sphere ; 
          struct { 
            FLOAT X;
            FLOAT Y;
            FLOAT Z;
          } POS;
          struct {
            FLOAT X;
            FLOAT Y;
            FLOAT Z;
          } NORMAL;

          FLOAT Unknown;
          FLOAT Unknown;

          UINT Unknown;
          FLOAT Empty; // 0
          FLOAT Empty; // 0
        }; break;

        // RefContainer
        case 18: {
          BOUNDING_SPHERE Sphere ;  
          char MatrixName[32];
          char RefObjectName[32];
        }; break;
    
        // container, used for rooms
        case 19: {
          CHILD_NODES ChildNodes;   
        }; break;

        // 2d collision vertex data
        case 20: {
          BOUNDING_SPHERE Sphere ; 
          UINT VertexCount;
          UINT Unknown;
          UINT Unknown;
          UINT Count;
          VECTOR_3F Vertex[VertexCount];
          FLOAT Unknown1[Count];               
        }; break;

        case 21: {
          BOUNDING_SPHERE Sphere; 
          UINT Count;
          UINT Unknown;
          CHILD_NODES ChildNodes;    
        }; break;

        // 3d collision object properties and geometry
        case 23: {
            UINT Unknown; // 0, 1
            SURFACE_TYPE Surface;

            UINT Count;            
            FLOAT Unknown0[Count];
   
            UINT PolygonCount <name="Number of polygons">; 
            struct {
              struct {    
                UINT CoordCount; // 3, 4
                VECTOR_3F Vertex[CoordCount];         
              } POLYGON[PolygonCount] <optimize=false>;
            } POLYGONS <name="Polygons">;
        }; break;

        // matrix
        case 24: {
          MATRIX TM;
          BOOL isShown; // 1 - show attached object, 0 - hide
          CHILD_NODES ChildNodes;      
        }; break;

        // Sound
        case 25: {
            FLOAT Unknown;
            UINT Unknown;
            UINT Unknown;
            char SoundName[32]; 
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown; 
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;    
        }; break;

        case 28: {
          BOUNDING_SPHERE Sphere ; 
          FLOAT Unknown;
          FLOAT Unknown;
          FLOAT Unknown;

          UINT PolygonCount;
          struct {
            INT type;
            //Printf("%d  ", type);
            FLOAT Unknown; // 1
            UINT Unknown; // 32767
            UINT MaterialIndex;
            UINT Count;
            struct {
              if (type == -256) {
                  FLOAT Unknown; 
                  FLOAT Unknown;
              } else {
                  FLOAT Unknown; 
                  FLOAT Unknown;
                  FLOAT Unknown;
                  FLOAT Unknown;
              }
            } FACE_VERTEX_ATTRIBUTES[Count];
          } POLYGON[PolygonCount] <optimize=false>; 
        }; break;

        case 29: {
          BOUNDING_SPHERE Sphere ; 
          UINT type; 
          UINT Unknown;
          FLOAT Unknown;
          FLOAT Unknown;
          FLOAT Unknown;
          FLOAT Unknown; 
          FLOAT Unknown;
          FLOAT Unknown;
          FLOAT Unknown; 
          if (type != 3)
            FLOAT Unknown;           
          CHILD_NODES ChildNodes;      
        }; break;

        // Portals
        case 30: {
          BOUNDING_SPHERE Sphere ; 
          char ConnectedRoomName[32];
          VECTOR_3F P1; // left bottom point
          VECTOR_3F P2; // up right point                 
        }; break;

        // only in Hard Truck 1
        case 31: {
          BOUNDING_SPHERE Sphere ; 
          UINT Count;
          struct {
            FLOAT X;
            FLOAT Y;
            FLOAT Z;
          } POS1;
          FLOAT Unknown;
          UINT Unknown;
          struct {
            FLOAT X;
            FLOAT Y;
            FLOAT Z;
          } POS2;
          struct {
            FLOAT Index;
            UINT Distance; 
          } VERTEX0[Count];
        }; break;

        // light
        case 33: {
          BOUNDING_SPHERE Sphere ; 
          
          UINT X;
          UINT Y;
          UINT Z;
          
          struct {
            FLOAT X;
            FLOAT Y;
            FLOAT Z;
          } POS;
          struct {
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
          } COLOR;
 
          CHILD_NODES ChildNodes;  
  
        }; break;   

        // only in hard truck 2
        case 34: {
          BOUNDING_SPHERE Sphere ; 
          FLOAT Unknown;
          UINT Count;
          struct { 
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
            FLOAT Unknown;
          } K[Count];
        }; break; 
 
        case 35: {
          BOUNDING_SPHERE Sphere ; 
          
          UINT unknown; // 1, 2, 3
          //Printf("%d", unknown);
          UINT MaterialIndex;
          UINT PolygonCount;

          struct {
            UINT type;

            FLOAT Unknown0; // 1
            UINT Unknown1; // 32767   
            UINT MaterialIndex; 
            UINT IndexCount; 

            if (type == 50) {
                struct {    
                  UINT Index; // vertex index 
                  VECTOR_2F UV;
                  VECTOR_3F FaceNormal;
                } FACE_VERTEX_ATTRIBUTES[IndexCount];
            } else
            if (type == 49) { 
                struct {  
                  UINT Index;
                  FLOAT Unknown;
                } FACE_VERTEX_ATTRIBUTES[IndexCount];
            } if (type == 48) { 
                struct {    
                  UINT Index;
                  VECTOR_3F FaceNormal;
                } FACE_VERTEX_ATTRIBUTES[IndexCount];
            } else if (type == 1 || type == 0 || type == 16 || type == 17) {
                struct {
                  UINT I1;
                  UINT I2;
                  UINT I3;
                } FACE_INDEXES;
            } else
            if (type == 2 || type == 3) {
                struct {     
                  UINT Index;
                  VECTOR_2F UV;
                } FACE_VERTEX_ATTRIBUTES[IndexCount];
            }
          } POLYGON[PolygonCount] <optimize=false>;             
        }; break;
 
        case 36: {
          BOUNDING_SPHERE Sphere ; 
          char Name1[32];
          char Name2[32];
          UINT type;
          UINT VertexCount;
          if (type == 2)
            struct { 
              VECTOR_3F Coordinates;
              VECTOR_2F UV;
              VECTOR_3F NORMAL;
            } VERTEX_ATTRIBUTES[VertexCount];
          else 
            struct { 
              VECTOR_3F Coordinates;
              VECTOR_2F UV;
              FLOAT Unknown;
            } VERTEX_ATTRIBUTES[VertexCount];
          CHILD_NODES ChildNodes;    
        }; break;   

    
        case 37: {
          BOUNDING_SPHERE Sphere ; 
          char Name[32];
          UINT type;
          UINT VertexCount;

          typedef struct {        
            if (type == 514) 
            {
              VECTOR_3F Coordinates;
              VECTOR_2F UV;
              VECTOR_3F NORMAL; 
              FLOAT Unknown;
              FLOAT Unknown; 
              FLOAT Unknown;  
              FLOAT Unknown;           
            }; 
            if (type == 258 || type == 515) 
            { 
              //drhdfhdhf();
              VECTOR_3F Coordinates;
              VECTOR_2F UV;
              FLOAT Unknown;  
              FLOAT Unknown;
              FLOAT Unknown;
              FLOAT Unknown;  
              FLOAT Unknown;    
            };              
            if (type == 2) 
            {
              VECTOR_3F Coordinates;
              VECTOR_2F UV;
              VECTOR_3F NORMAL;
            };                   
            if (type == 3) 
            {
             //bhl();
              VECTOR_3F Coordinates;
              VECTOR_3F UVW;                 
            };
          } VERTEX_DATA <optimize=false>;  
        
          VERTEX_DATA VertexArray[VertexCount] <name="Vertex data">;
   
          CHILD_NODES ChildNodes;    
      }; break;

      case 39: {
        FLOAT Unknown;
        FLOAT Unknown;
        FLOAT Unknown;
        FLOAT Unknown;
        FLOAT Unknown;
        FLOAT Unknown;
        FLOAT Unknown;
        FLOAT Unknown;
        FLOAT Unknown;
      
        CHILD_NODES ChildNodes;          
      }; break;

      case 40: {
        BOUNDING_SPHERE Sphere ; 

        char Empty[32];
        char Name[32]; // generator name

        UINT type;
        FLOAT Unknown;
        UINT Count;
        FLOAT Unknown1[Count];   
      }; break;
    }; 
    // } PROPERTIES <name="Properties">;
    while (true) { 
      ID = ReadInt(FTell());    
      if (ID == 444)
      {  
        IDENTIFIER Identifier <name="Group_Block", bgcolor=0xFFFF00>;
        ++End4;
      }
      else break;
    };
    IDENTIFIER Identifier <name="End Chunk">;
   //
  } CH <name=getChunkName>;
  typedef struct (int arraySize) {
    CH array[arraySize] <optimize=false, name=getChunkName>;
  } CHUNKS;         
  CHUNKS ChunkArray(ChildCount) <name=ChunkName>;

  return 0;
};

string ChunkName(CHUNKS &chunks) {

  if (exists(chunks.array.HEADER))
    switch (chunks.array.HEADER.ID) {
      case 0: return "Empty/Unused (id 0): " + chunks.array.HEADER.String; break;
      case 1: return "Empty/Unused (id 1): " + chunks.array.HEADER.String; break;
      case 2: return "Switch?? (id 2): " + chunks.array.HEADER.String; break;
      case 3: return "Goods (id 3): " + chunks.array.HEADER.String; break;
      case 4: return "Road/Truck Object (id 4): " + chunks.array.HEADER.String; break;
      case 5: return "NodeContainer (id 5): " + chunks.array.HEADER.String; break;
      case 6: return "Vertex Data (id 6): " + chunks.array.HEADER.String; break;
      case 7: return "Vertex Data (id 7): " + chunks.array.HEADER.String; break;
      case 8: return "Face Data (id 8): " + chunks.array.HEADER.String; break;
      case 9: return "Trigger parameters (id 9): " + chunks.array.HEADER.String; break;
      case 10: return "NodeLevelOfDetail (id 10): " + chunks.array.HEADER.String; break;
      case 11: return "Unknown (id 11): " + chunks.array.HEADER.String; break;
      case 12: return "Collision ??: " + chunks.array.HEADER.String; break;
      case 13: return "Trigger object (id 13): " + chunks.array.HEADER.String; break;
      case 14: return "Unknown object (id 14): " + chunks.array.HEADER.String; break;
      case 16: return "Unknown object (id 16): " + chunks.array.HEADER.String; break;
      case 17: return "Unknown object (id 17): " + chunks.array.HEADER.String; break;
      case 18: return "RefContainer (id 18): " + chunks.array.HEADER.String; break;
      case 19: return "NodeRoom (id 19): " + chunks.array.HEADER.String; break;
      case 20: return "Collision (id 20): " + chunks.array.HEADER.String; break;
      case 21: return "Switch Group (id 21): " + chunks.array.HEADER.String; break;
      case 23: return "Collision (id 23): " + chunks.array.HEADER.String; break;
      case 24: return "Transformation matrix (id 24): " + chunks.array.HEADER.String; break;
      case 25: return "Sound object (id 25): " + chunks.array.HEADER.String; break;
      case 28: return "Vertex Data (id 28): " + chunks.array.HEADER.String; break;
      case 30: return "Portal object (id 30): " + chunks.array.HEADER.String; break;
      case 33: return "Light object (id 33): " + chunks.array.HEADER.String; break;
      case 35: return "Face data (id 35): " + chunks.array.HEADER.String; break;
      case 37: return "ContainerVertex (id 37): " + chunks.array.HEADER.String; break;
      case 40: return "Special object (id 40): " + chunks.array.HEADER.String; 
      default: return "Chunk: (id " + IntToStr(chunks.array.HEADER.ID) + "): " + chunks.array.HEADER.String; 
  } else 
    return "END";
};

string getChunkName(CH &chunk) {
  if (exists(chunk.HEADER))
    switch (chunk.HEADER.ID) {
      case 0: return "Empty/Unused (id 0): " + chunk.HEADER.String; break;
      case 1: return "Empty/Unused (id 1): " + chunk.HEADER.String; break;
      case 2: return "Switch?? (id 2): " + chunk.HEADER.String; break;
      case 3: return "Goods (id 3): " + chunk.HEADER.String; break;
      case 4: return "Road/Truck Object (id 4): " + chunk.HEADER.String; break;
      case 5: return "NodeContainer(id 5): " + chunk.HEADER.String; break;
      case 6: return "Vertex Data(id 6): " + chunk.HEADER.String; break;
      case 7: return "Vertex Data(id 7): " + chunk.HEADER.String; break;
      case 8: return "Face Data(id 8): " + chunk.HEADER.String; break;
      case 9: return "Trigger (id 9): " + chunk.HEADER.String; break;
      case 10: return "NodeLevelOfDetail (id 10): " + chunk.HEADER.String; break;
      case 11: return "Unknown: " + chunk.HEADER.String; break;
      case 12: return "Collision??: " + chunk.HEADER.String; break;
      case 13: return "Trigger object (id 13): " + chunk.HEADER.String; break;
      case 14: return "Object object (id 14): " + chunk.HEADER.String; break;
      case 16: return "Object object (id 16): " + chunk.HEADER.String; break;
      case 17: return "Object object (id 17): " + chunk.HEADER.String; break;
      case 18: return "RefContainer (id 18): " + chunk.HEADER.String; break;
      case 19: return "NodeRoom (id 19): " + chunk.HEADER.String; break;
      case 20: return "Collision 2D (id 20): " + chunk.HEADER.String; break;
      case 21: return "Switch Group (id 21): " + chunk.HEADER.String; break;
      case 23: return "Collision 3D (id 23): " + chunk.HEADER.String; break;
      case 24: return "Transformation matrix (id 24) " + chunk.HEADER.String; break;
      case 25: return "Sound object (id 25): " + chunk.HEADER.String; break;
      case 28: return "Vertex Data (id 28): " + chunk.HEADER.String; break;
      case 30: return "Portal object (id 30): " + chunk.HEADER.String; break;
      case 33: return "Light object (id 33): " + chunk.HEADER.String; break;
      case 35: return "Face data (id 35): " + chunk.HEADER.String; break;
      case 37: return "ContainerVertex (id 37): " + chunk.HEADER.String; break;
      case 40: return "Special object (id 40): " + chunk.HEADER.String; break;
      default: return "Chunk: (id " + IntToStr(chunk.HEADER.ID) + "): "  + chunk.HEADER.String;
  }
  else 
    return "END";
}

struct {
  IDENTIFIER Begin <name="BEGIN">;
  while (chunkTree(1) == 0) 
  {
    ID = ReadInt(FTell());
    // pass chunks
    if (ID == 222) 
    {     
       IDENTIFIER End <name="END">;  
       //Printf("%d, %d ", Start4, End4);  
       return 1;
    };
  };
} Chunks <name="Nodes">;
 